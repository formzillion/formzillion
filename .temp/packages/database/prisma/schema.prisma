generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                String        @id @default(cuid())
  email             String?       @unique
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime?     @updatedAt @map("updated_at")
  billingAddress    Json?         @map("billing_address")
  billingCustomerId String?       @map("billing_customer_id")
  features          Json?
  firstName         String?       @map("first_name")
  formCount         Int?          @map("form_count")
  fullName          String?       @map("full_name")
  kind              String?
  lastName          String?       @map("last_name")
  planId            String?       @map("plan_id")
  planName          String?       @map("plan_name")
  registeredOn      DateTime      @default(now()) @map("registered_on")
  verified          Boolean       @default(false)
  avatar            String?
  language          String?
  timezone          String?
  title             String?
  memberships       memberships[]
  workflows         workflows[]
  teams             teams[]       @relation("teamsTousers")

  @@map("users")
}

model form_submissions {
  id        String   @id @default(cuid())
  ip        String   @default("")
  country   String   @default("")
  status    String   @default("created")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  fields    Json?
  formId    String?  @map("form_id")
  isSpam    Boolean?
  form      forms?   @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@index([formId])
  @@map("form_submissions")
}

model forms {
  id                  String             @id @default(nanoid(8))
  name                String
  status              String             @default("created")
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  fields              Json?
  sendToEmail         String[]           @map("send_to_email")
  emailNotifications  Boolean            @default(true)
  formEnabled         Boolean            @default(true)
  submissionArchive   Boolean            @default(false)
  redirectUrl         String?
  redirectData        Json?
  email               String?            @map("email")
  teamId              String             @map("team_id")
  workflowId          Int?
  spamConfig          Json?
  spamProvider        String?
  customHoneypot      String?
  customSpamWords     String[]
  submissions         form_submissions[]
  team                teams              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  workflows           workflows[]
  autoResponder       Boolean            @default(false)
  autoResponderConfig Json?

  @@index([teamId])
  @@index([workflowId])
  @@map("forms")
}

model projects {
  id        String   @id @default(cuid())
  name      String?
  status    String   @default("active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("projects")
}

model teams {
  id                String             @id @default(cuid())
  type              String             @default("default")
  name              String
  status            String             @default("")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  slug              String             @unique
  appIconLogo       String?
  appLogo           String?
  bio               String?
  brandColor        String             @default("#292929")
  darkBrandColor    String             @default("#fafafa")
  hideBranding      Boolean            @default(false)
  metadata          Json?
  theme             String?
  billingCustomerId String?            @unique @map("billing_customer_id")
  planId            String?            @map("plan_id")
  planName          String?            @default("free") @map("plan_name")
  connections       connections[]
  forms             forms[]
  members           memberships[]
  teamInvitations   team_invitations[]
  workflows         workflows[]
  users             users[]            @relation("teamsTousers")
  avatar            String?
  plan_metering     plan_metering[]

  @@index([slug])
  @@map("teams")
}

model memberships {
  teamId               String
  userId               String
  accepted             Boolean        @default(false)
  role                 membershipRole
  disableImpersonation Boolean        @default(false)
  team                 teams          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user                 users          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@index([teamId])
  @@index([userId])
}

model team_invitations {
  id        String   @id @default(cuid())
  email     String?
  status    String   @default("pending")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  teamId    String?  @map("team_id")
  team      teams?   @relation(fields: [teamId], references: [id])

  @@map("team_invitations")
}

model connections {
  id        Int      @id @default(autoincrement())
  email     String?
  status    String   @default("inActive")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  teamId    String   @map("team_id")
  apiKeys   Json
  name      String   @default("")
  appId     Int?
  appSlug   String
  app       apps?    @relation(fields: [appId], references: [id])
  team      teams    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  tasks     tasks[]

  @@index([teamId])
  @@map("connections")
}

model apps {
  id          Int           @id @default(autoincrement())
  name        String
  status      String        @default("in_active")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  appConfig   Json
  slug        String        @unique
  connections connections[]
  tasks       tasks[]

  @@index([slug])
  @@map("apps")
}

model workflows {
  name      String   @default("Default workflow")
  status    String   @default("active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  formId    String   @map("form_id")
  teamId    String   @map("team_id")
  userId    String?  @map("user_id")
  id        Int      @id @default(autoincrement())
  tasks     tasks[]
  form      forms    @relation(fields: [formId], references: [id], onDelete: Cascade)
  team      teams    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      users?   @relation(fields: [userId], references: [id])

  @@index([formId])
  @@index([teamId])
  @@map("workflows")
}

model tasks {
  id           Int         @id @default(autoincrement())
  type         String      @default("action")
  template     Json?
  appId        Int         @map("app_id")
  appSlug      String?     @map("app_slug")
  workflowId   Int         @map("workflow_id")
  connectionId Int         @map("connection_id")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  name         String?
  slug         String?
  status       String      @default("active")
  app          apps        @relation(fields: [appId], references: [id])
  connection   connections @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  workflow     workflows   @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([appId])
  @@index([workflowId])
  @@map("tasks")
}

model invoices {
  id                Int     @id @default(autoincrement())
  stripeInvoiceId   String  @map("stripe_invoice_id")
  billingCustomerId String  @map("billing_customer_id")
  status            String  @map("status")
  planId            String  @map("plan_id")
  planName          String? @map("plan_name")
  periodEndDate     String  @map("period_end_date")
  periodStartDate   String? @map("period_start_date")
  totalAmount       String? @map("total_amount")

  @@map("invoice")
}

model tokens {
  id        Int      @id @default(autoincrement())
  type      String   @default("defaultToken")
  token     String   @unique
  isUsed    Boolean  @default(false)
  isActive  Boolean  @default(true)
  email     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model plan_metering {
  id                Int    @id @default(autoincrement())
  submissionCounter Int    @default(0) @map("submission_counter")
  memberCounter     Int    @default(0) @map("member_counter")
  formCounter       Int    @default(0) @map("form_counter")
  planId            String
  planName          String
  teamSlug          String @unique
  teamId            String @unique
  team              teams  @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@map("plan_metering")
}

enum membershipRole {
  MEMBER
  ADMIN
  OWNER
}
